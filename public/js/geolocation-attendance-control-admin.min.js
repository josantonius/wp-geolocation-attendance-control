const GOOGLE_API_KEY = "YOUR_SECRET_KEY"; document.addEventListener("DOMContentLoaded", function () { Vue.component("gmap-autocomplete", VueGoogleMaps.Autocomplete), Vue.component("gmap-map", VueGoogleMaps.Map), Vue.component("VueGoogleMapsPlacesAggregator", VueGoogleMapsPlacesAggregator.VueGoogleMapsPlacesAggregator), Vue.component("VueGoogleAutocomplete", VueGoogleAutocomplete.VueGoogleAutocomplete), Vue.use(VueGoogleMaps, { load: { key: GOOGLE_API_KEY, libraries: "places" } }), new Vue({ el: "#app", data: e => ({ selected: [], mounted: !1, search: "", place: null, centre: "", activity: "", startTime: !1, start_hour: null, endTime: !1, end_hour: null, pagination: { descending: !0, page: 1, rowsPerPage: 10, sortBy: "id" }, placeholder: "Dirección", className: "", id: "", value: "", options: { componentRestrictions: { country: "es" } }, currentIndex: null, zoom: 10, center: { lat: 37.392529, lng: -5.994072 }, width: "100%", height: "500px", maxHeight: "600px", maxWidth: "100%", markers: [], toolbarTitle: "Asistencias", toolbarColor: "indigo", formatDate: "DD [de] MMMM [de] YYYY", formatHour: "hh:mm", defaultDateOrder: "DEC", defaultHourOrder: "DEC", locale: "es", dialog: !1, dialogConfirm: !1, dialogTitle: "", dialogSubtitle: "", headers: [{ text: "ID", align: "left", value: "id", sortable: !0 }, { text: "Centro", align: "right", value: "centre", sortable: !0 }, { text: "Actividad", value: "activity", sortable: !0, align: "right" }, { text: "Inicio", value: "start_hour", sortable: !0, align: "right" }, { text: "Fin", value: "end_hour", sortable: !0, align: "right" }, { text: "Acciones", value: "centre", sortable: !1, align: "center" }], editedIndex: -1 }), mounted() { this.selectCentres() }, methods: { getTemplate: (e, t, o, i, a) => `\n          <div id="content">\n            <div class="gac-heading">\n              <h1 class="gac-first-heading">${e}</h1>\n              <h3 class="gac-second-heading">${t} - ${o} - ${i}</span></h3>\n              \n            </div>\n            <div id="bodyContent">\n              <p>${a}</p>\n            </div>\n          </div>\n        `, request(e, t, o) { var i = new URLSearchParams; return o = o || {}, i.append("action", t), i.append("nonce", geolocationAttendanceControlAdmin.nonce), $.each(o, function (e, t) { i.append(e, t) }), new Promise((t, o) => axios({ method: e, url: geolocationAttendanceControlAdmin.ajax_url, data: i }).then(e => { t(e.data) }).catch(e => { console.log(e), o(e) })) }, selectCentres() { this.request("post", "select_centres").then(e => { e.forEach(e => { e.infoText = this.getTemplate(e.centre, e.activity, e.start_hour, e.end_hour, e.address), e.position = { lat: parseFloat(e.latitude), lng: parseFloat(e.longitude) }, e.value = !1, this.addMarker(e) }), console.log(this.markers), this.mounted = !0 }).catch(e => { console.log(e) }) }, insertCentre() { var e = { centre: this.centre, activity: this.activity, start_hour: this.start_hour, end_hour: this.end_hour, latitude: this.place.location.lat, longitude: this.place.location.lng, address: this.place.formatted_address, place_id: this.place.place_id }; this.request("post", "insert_centre", e).then(e => { e && this.save(e) }).catch(e => { console.log(e) }) }, deleteCentre() { var e = { id: this.markers[this.currentIndex].id }; this.request("post", "delete_centre", e).then(e => { e && (this.markers.splice(this.currentIndex, 1), this.currentIndex = null) }).catch(e => { console.log(e) }) }, onOpenMarker(e, t) { console.info("onOpenMarker", e, t) }, onCloseMarker(e, t) { console.info("onCloseMarker", e, t) }, onCLickMarker(e, t) { console.info("onCLickMarker", e, t) }, onKeyUp(e) { console.info("onKeyUp", e) }, onKeyPress(e) { console.info("onKeyPress", e) }, onFocus() { console.info("onFocus") }, onBlur() { console.info("onBlur") }, onChange() { console.info("onChange") }, onPlaceChanged(e) { this.place = e, console.info("onPlaceChanged", e) }, clear() { this.$refs.autocomplete.clear() }, deleteItemAsk(e) { this.dialogTitle = "Eliminar centro", this.dialogSubtitle = "¿Eliminar el centro " + e.centre + "?", this.dialogConfirm = !0, this.currentIndex = this.markers.indexOf(e) }, deleteItems() { this.dialogTitle = "", this.dialogSubtitle = "", this.dialogConfirm = !1, null !== this.currentIndex ? this.deleteCentre() : this.deleteSelectedItems() }, deleteItemsAsk() { this.dialogTitle = "Eliminar centros", this.dialogSubtitle = "¿Eliminar los centros seleccionados?", this.dialogConfirm = !0 }, deleteSelectedItems() { this.selected.forEach(e => { this.currentIndex = this.markers.indexOf(e), this.deleteCentre() }), this.selected = [] }, close() { this.dialog = !1, this.resetForm() }, save(e) { this.addMarker({ id: e, centre: this.centre, activity: this.activity, start_hour: this.start_hour, end_hour: this.end_hour, latitude: this.place.location.lat, longitude: this.place.location.lng, position: { lat: this.place.location.lat, lng: this.place.location.lng }, address: this.place.formatted_address, place_id: this.place.place_id, clickable: !0, infoText: this.getTemplate(this.centre, this.activity, this.start_hour, this.end_hour, this.place.formatted_address) }), this.centerMap(this.place.location), this.close(), this.zoomMap(15) }, goToMarker(e) { this.$refs.google_maps_places_aggregator.infoWinOpen = !1, this.$refs.google_maps_places_aggregator.infoWindowPos = e.position, this.$refs.google_maps_places_aggregator.infoOptions.content = e.infoText, this.$refs.google_maps_places_aggregator.infoWinOpen = !0, this.centerMap(e.position), this.zoomMap(15) }, addMarker(e) { this.markers.push(e) }, centerMap(e) { this.center = e }, zoomMap(e) { this.zoom = e }, resetForm() { this.centre = "", this.activity = "", this.start_hour = null, this.end_hour = null, this.place = null } }, watch: { dialog(e) { e || this.close() } }, computed: { valid: function () { return "" !== this.centre && "" !== this.activity && this.start_hour && this.end_hour && this.place }, formTitle() { return -1 === this.editedIndex ? "New Item" : "Edit Item" } } }) });